import time

# Lista de operadores
OPERATORS = ['+', '-', '*', '/', '(', ')', ';', '**', 'u-']

# Análise léxica (tokenização)
def lexer(expression):
    tokens = []  
    current_token = ''  
    i = 0  
    while i < len(expression):  
        char = expression[i] 
        if char.isdigit() or char == '.':  
            current_token += char  
        elif char in OPERATORS or char == ' ':  
            if current_token:  
                if '.' in current_token:  
                    tokens.append(('NUMBER', float(current_token)))  
                else:
                    tokens.append(('NUMBER', int(current_token)))  
                current_token = ''  
            if char in OPERATORS:  
                # Verifica se o próximo caractere forma um operador de dois caracteres
                if i + 1 < len(expression) and expression[i:i+2] in OPERATORS:
                    tokens.append(('OPERATOR', expression[i:i+2]))  
                    i += 1  
                elif i + 1 < len(expression) and expression[i:i+2] == '- ': 
                    tokens.append(('OPERATOR', 'u-')) 
                    i += 1  
                else:
                    tokens.append(('OPERATOR', char))  
        i += 1  
    if current_token:  
        if '.' in current_token:  
            tokens.append(('NUMBER', float(current_token)))  
        else:
            tokens.append(('NUMBER', int(current_token)))  
    return tokens

# Análise sintática
def parser(tokens):
    if not tokens:  
        return None  

    parentheses = []  
    for i, token in enumerate(tokens): 
        if token[0] == 'NUMBER' and (i+1 < len(tokens) and tokens[i+1][0] != 'OPERATOR'): 
            raise SyntaxError("Erro de sintaxe: operador esperado")  
        elif token[0] == 'OPERATOR':  
            if token[1] in OPERATORS:  
                if token[1] in ['(', ')']:  
                    parentheses.append(token[1])  
                elif i+1 >= len(tokens) or tokens[i+1][0] != 'NUMBER': 
                    if token[1] != 'u-':  
                        raise SyntaxError("Erro de sintaxe: número esperado")  
            else:  
                raise SyntaxError("Erro de sintaxe: operador inválido")  
    if parentheses.count('(') != parentheses.count(')'):
        raise SyntaxError("Erro de sintaxe: parênteses desequilibrados") 
    return True  

# Análise semântica
def evaluate_expression(tokens):
    expression = ''.join(str(token[1]) if token[0] == 'NUMBER' else ('-' if token[1] == 'u-' else token[1]) for token in tokens)  
    try:
        result = eval(expression) 
    except ZeroDivisionError: 
        raise ValueError("Erro semântico: divisão por zero")
    except Exception as e: 
        raise ValueError(f"Erro semântico: {str(e)}")
    return result  

# Programa principal
if __name__ == "__main__":
    expressions = input("Digite uma ou mais expressões aritméticas (+, -, *, /, (, ), **): ").split(';') 
    for expression in expressions:
        tokens = lexer(expression.strip())  
        print("Tokens:", tokens)  

        try:
            start_time = time.time()
            parser_result = parser(tokens)
            end_time = time.time()
            if parser_result: 
                print("Análise sintática bem-sucedida.")  
                result = evaluate_expression(tokens) 
                print("Resultado da expressão:", result)  
        except (SyntaxError, ZeroDivisionError) as e:  
            print("Erro:", e)
    
    print(("CONSTRUÍDO COM SUCESSO. Tempo de execução: %s segundos" % round(end_time - start_time)))
